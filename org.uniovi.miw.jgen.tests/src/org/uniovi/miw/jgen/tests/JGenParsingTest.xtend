/*
 * generated by Xtext 2.16.0
 */
package org.uniovi.miw.jgen.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.TestInfo
import org.junit.jupiter.api.Assertions
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.uniovi.miw.jgen.jGen.Model
import org.uniovi.miw.jgen.interpreter.JGenInterpreter
import org.eclipse.xtext.diagnostics.Severity
import org.eclipse.xtext.testing.extensions.InjectionExtension

@ExtendWith(InjectionExtension)
@InjectWith(JGenInjectorProvider)
class JGenParsingTest {

	@Inject extension ParseHelper<Model> parseHelper
	@Inject extension ValidationTestHelper
	@Inject JGenInterpreter interpreter
	@Inject TestFilesLoader loader
	
	@BeforeEach 
	def void beforeEach(TestInfo info) {
		val testName = info.displayName
		 
		loader.loadInput(testName.substring(12, testName.length - 2), "parsing")
		loader.loadOutput(testName.substring(12, testName.length - 2), "parsing")
		
		if(testName.contains("Experimental")) {
			return
		}
		
		if (loader.input === null) {
			throw new Exception("Test file not found")
		}
				
		if(testName.contains("Error")){
			val result = loader.input.parse
			val issues = validate(result)
			if(!(issues.exists[i | i.severity == Severity.ERROR])){
				throw new AssertionError("Se ha validado correctamente un programa erroneo");
			}
			return
		}

		val result = loader.input.parse
		Assertions.assertNotNull(result)
		result.assertNoErrors
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		if(loader.output === null) {
			Assertions.fail("No hay Salida del test")
			return
		}
		
		val modelString = interpreter.processModelOutline(result)
		Assertions.assertEquals(modelString.trim(), loader.output.trim())
    }
	
// #Automated Section

	/*
	 * STRUCTURE TESTS
	 */

	@Test
	def void ParsingTest_Basic_BioQuery() {}

	@Test
	def void ParsingTest_Basic_BioSimple() {}

	@Test
	def void ParsingTest_Basic_CommentsQuery() {}

	@Test
	def void ParsingTest_Basic_Exactly() {}

	@Test
	def void ParsingTest_Basic_ExactlyOneLetter() {}

	@Test
	def void ParsingTest_Basic_Expression_And() {}

	@Test
	def void ParsingTest_Basic_Expression_And2() {}

	@Test
	def void ParsingTest_Basic_Expression_AndOr() {}

	@Test
	def void ParsingTest_Basic_Expression_AndOr2() {}

	@Test
	def void ParsingTest_Basic_Expression_Not() {}

	@Test
	def void ParsingTest_Basic_Expression_Parenthesis() {}

	@Test
	def void ParsingTest_Basic_Expression_Parenthesis2() {}

	@Test
	def void ParsingTest_Basic_Expression_Parenthesis3() {}

	@Test
	def void ParsingTest_Basic_Expression_Parenthesis4() {}

	@Test
	def void ParsingTest_Basic_FourSimpleQueries() {}

	@Test
	def void ParsingTest_Basic_Keyword() {}

	@Test
	def void ParsingTest_Basic_Keyword2() {}

	@Test
	def void ParsingTest_Basic_Keyword3() {}

	@Test
	def void ParsingTest_Basic_Keyword4() {}

	@Test
	def void ParsingTest_Basic_KeywordUser() {}

	@Test
	def void ParsingTest_Basic_KeywordUser2() {}

	@Test
	def void ParsingTest_Basic_PostQuery() {}

	@Test
	def void ParsingTest_Basic_ResponseQuery() {}

	@Test
	def void ParsingTest_Basic_SearchAll() {}

	@Test
	def void ParsingTest_Basic_SearchAll2() {}

	@Test
	def void ParsingTest_Basic_Simplest() {}

	@Test
	def void ParsingTest_Basic_ThreeSimpleQueries() {}

	@Test
	def void ParsingTest_Basic_TwoSimpleQueries() {}

	@Test
	def void ParsingTest_Basic_Unicode() {}

	@Test
	def void ParsingTest_Basic_Unicode2() {}

	@Test
	def void ParsingTest_Basic_User() {}

	@Test
	def void ParsingTest_Basic_User2() {}

	@Test
	def void ParsingTest_Basic_User3() {}

	/*
	 * ERROR TESTS
	 */

	@Test
	def void ParsingTest_Error_CommentsQueryMissing() {}

	@Test
	def void ParsingTest_Error_CommentsQueryMissing2() {}

	@Test
	def void ParsingTest_Error_CommentsQueryMissing3() {}

	@Test
	def void ParsingTest_Error_CommentsQueryMissing4() {}

	@Test
	def void ParsingTest_Error_CommentsQueryMissing5() {}

	@Test
	def void ParsingTest_Error_DuplicatePlatform() {}

	@Test
	def void ParsingTest_Error_EmptyDoubleQuotes() {}

	@Test
	def void ParsingTest_Error_EmptyQuotes() {}

	@Test
	def void ParsingTest_Error_EmptyTextOnly() {}

	@Test
	def void ParsingTest_Error_MisplacedComma() {}

	@Test
	def void ParsingTest_Error_MisplacedComma2() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching2() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching3() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching4() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching5() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching6() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching7() {}

	@Test
	def void ParsingTest_Error_ParenthesisNotMatching8() {}

	@Test
	def void ParsingTest_Error_PostQueryMissing() {}

	@Test
	def void ParsingTest_Error_PostQueryMissing2() {}

	@Test
	def void ParsingTest_Error_QuotesBoth() {}

	@Test
	def void ParsingTest_Error_QuotesLeft() {}

	@Test
	def void ParsingTest_Error_QuotesRight() {}

	@Test
	def void ParsingTest_Error_TextOnly() {}

	@Test
	def void ParsingTest_Error_TextOnly2() {}

	@Test
	def void ParsingTest_Error_ThreeQuotes() {}

	@Test
	def void ParsingTest_Error_ZeroQueries() {}

// #End Section
}

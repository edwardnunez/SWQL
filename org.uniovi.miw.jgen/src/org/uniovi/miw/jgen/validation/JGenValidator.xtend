/*
 * generated by Xtext 2.16.0
 */
package org.uniovi.miw.jgen.validation

import org.eclipse.xtext.validation.Check
import org.uniovi.miw.jgen.jGen.JGenPackage
import org.uniovi.miw.jgen.jGen.Model
import org.uniovi.miw.jgen.jGen.SimpleSearch
import org.uniovi.miw.jgen.jGen.KeywordSearch
import org.uniovi.miw.jgen.jGen.UserSearch
import org.uniovi.miw.jgen.jGen.ExactlySearch
import java.util.HashSet
import org.uniovi.miw.jgen.jGen.SearchMode
import org.uniovi.miw.jgen.jGen.SearchLang
import org.uniovi.miw.jgen.jGen.SearchLocation
import org.uniovi.miw.jgen.jGen.SearchArea
import org.uniovi.miw.jgen.jGen.SearchLimit
import org.uniovi.miw.jgen.jGen.SearchDelay
import java.util.Locale
import org.uniovi.miw.jgen.jGen.SearchDate
import org.uniovi.miw.jgen.jGen.RepeatOptions
import org.joda.time.DateTime

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class JGenValidator extends AbstractJGenValidator {
	
	public static val UNKNOWN_ERROR = "UnknownError"
	 
	//PLATFORMS
	public static val INVALID_PLATFORM = 'InvalidPlatform'
	public static val PLATFORMS = #['TWITTER', 'FACEBOOK','*']	
	public static val PLATFORM_CHARACTER_LIMITS = #{'TWITTER' -> 280 ,'FACEBOOK' ->63205}
	
	//SEARCH MODES
	public static val SEARCH_MODES = #['POPULAR', 'RECENT', 'MIXED']
	
	/*
	 * PLATAFORMAS 
	 */
	@Check
	def checkValidPlatforms(Model m) {
		m.platforms.forEach [p, i |
			if (!PLATFORMS.exists[s | s == p.platform]) {
				error('''Invalid Platform [«p.platform»]''', 
					JGenPackage.eINSTANCE.model_Platforms)
			}
		]
	}
	
	@Check
	def checkDuplicatedPlatform(Model m){
		val platforms = m.platforms
		if(platforms.size() === 0)
			return
			
		val set = new HashSet<String>()
		platforms.forEach[p, i|
			if(!set.add(p.platform)){
				error('''Duplicate Platform [«p.platform»]''',
					m,
					JGenPackage.Literals.MODEL__PLATFORMS, i)
			}
		]
	}
	
	@Check
	def checkAllPlatforms(Model m){
		val platforms = m.platforms
		if(platforms.size() === 0) {
			info('''This query will search in the following platforms [«PLATFORMS.subList(0, PLATFORMS.length -1).join(",")»]''',
				m, JGenPackage.Literals.MODEL__PLATFORMS, 0
			)
			return
		}
		
		if(m.platforms.exists[p | p.platform.equals("*")]){
			if(m.platforms.length == 1){
				info('''This query will search in the following platforms [«PLATFORMS.subList(0, PLATFORMS.length -1).join(",")»]''',
					m, JGenPackage.Literals.MODEL__PLATFORMS, 0
				)
			} else {
				error('Cannot mix individual platforms with the the full platform search',
					m, JGenPackage.Literals.MODEL__PLATFORMS, 0
				)
			}
		}
	}
	
	/*
	 * QUERIES
	 */
	@Check
	def checkSearchTermLength(SimpleSearch s) 
	{
		val a = s.eResource.getContents().get(0)
		val model = a as Model
		model.platforms.forEach[x | 
			val length = if (PLATFORM_CHARACTER_LIMITS.containsKey(x.platform.toUpperCase())) 
							PLATFORM_CHARACTER_LIMITS.get(x.platform.toUpperCase()) as int else
							-1
			if(length > 0 && length < s.query.length) {
				warning('''This query with «s.query.length» characters, exceeds the character limit of the selected platform [«x.platform.toUpperCase()», «length» characters]''',
					model, JGenPackage.Literals.MODEL__PLATFORMS, 0
				)
			}
		]
		
		if(s.query.length > 100000)
			error('''Query Character Limit exceeded''', JGenPackage.eINSTANCE.simpleSearch_Query)
	}
	
	@Check
	def checkSearchTermLength(KeywordSearch s) 
	{
		val a = s.eResource.getContents().get(0)
		val model = a as Model
		model.platforms.forEach[x | 
			val length = if (PLATFORM_CHARACTER_LIMITS.containsKey(x.platform.toUpperCase())) 
							PLATFORM_CHARACTER_LIMITS.get(x.platform.toUpperCase()) as int else
							-1
			if(length > 0 && length < s.query.length) {
				warning('''This query with «s.query.length» characters, exceeds the character limit of the selected platform [«x.platform.toUpperCase()», «length» characters]''',
					model, JGenPackage.Literals.MODEL__PLATFORMS, 0
				)
			}
		]
		
		if(s.query.length > 100000)
			error('''Query Character Limit exceeded''', JGenPackage.eINSTANCE.keywordSearch_Query)
	}
	
	@Check
	def checkSearchTermLength(UserSearch s) 
	{
		val a = s.eResource.getContents().get(0)
		val model = a as Model
		model.platforms.forEach[x | 
			val length = if (PLATFORM_CHARACTER_LIMITS.containsKey(x.platform.toUpperCase())) 
							PLATFORM_CHARACTER_LIMITS.get(x.platform.toUpperCase()) as int else
							-1
			if(length > 0 && length < s.query.length) {
				warning('''This query with «s.query.length» characters, exceeds the character limit of the selected platform [«x.platform.toUpperCase()», «length» characters]''',
					model, JGenPackage.Literals.MODEL__PLATFORMS, 0
				)
			}
		]
		
		if(s.query.length > 100000)
			error('''Query Character Limit exceeded''', JGenPackage.eINSTANCE.userSearch_Query)
	}
	
	@Check
	def checkSearchTermLength(ExactlySearch s) 
	{
		val a = s.eResource.getContents().get(0)
		val model = a as Model
		model.platforms.forEach[x | 
			val length = if (PLATFORM_CHARACTER_LIMITS.containsKey(x.platform.toUpperCase())) 
							PLATFORM_CHARACTER_LIMITS.get(x.platform.toUpperCase()) as int else
							-1
			if(length > 0 && length < s.query.length) {
				warning('''This query with «s.query.length» characters, exceeds the character limit of the selected platform [«x.platform.toUpperCase()», «length» characters]''',
					model, JGenPackage.Literals.MODEL__PLATFORMS, 0
				)
			}
		]
		
		if(s.query.length > 100000)
			error('''Query Character Limit exceeded''', JGenPackage.eINSTANCE.exactlySearch_Query)
	}
	
	/*
	 * SEARCH BY
	 */
	@Check
	def checkSearchMode(SearchMode sm){
		if(!SEARCH_MODES.exists[m | sm.mode.equals(m)]){
			error('''The search mode [«sm.mode»] is not valid, valid values are [«SEARCH_MODES.join(",")»]''', sm, JGenPackage.Literals.SEARCH_MODE__MODE)
		}
	}
	
	@Check
	def checkSearchLang(SearchLang sl){
		if(!Locale.ISOLanguages.contains(sl.lang.toLowerCase()))
				error('''Wrong Search Language [«sl.lang»], Language must be a 2-digit ISO 639-1 language code''',
					JGenPackage.eINSTANCE.searchLang_Lang)
	}
	
	@Check
	def checkSearchLocation(SearchLocation loc) {
		if(loc.lat > 90.0 || loc.lat < -90.0){
			error("The latitude value must be a decimal number between -90 and 90", loc, JGenPackage.Literals.SEARCH_LOCATION__LAT)
		}
		if(loc.lon > 180.0 || loc.lon < -180.0){
			error("The latitude value must be a decimal number between -180 and 180", loc, JGenPackage.Literals.SEARCH_LOCATION__LON)
		}
	}
	
	@Check
	def checkSearchArea(SearchArea area) {
		if(area.radius < 1){
			error("The search radius cannot be lower than 1km", area, JGenPackage.Literals.SEARCH_AREA__RADIUS)
		}
		if(area.radius > 1000){
			error("The search radius cannot be greater than 1000km", area, JGenPackage.Literals.SEARCH_AREA__RADIUS)
		}
	}
	
	/*
	 * DATE & REPEAT
	 */
	@Check
	def checkDateValid(SearchDate sd) {
		//fecha en formato ISO 8601
		try {
			var from = new DateTime(sd.from);
			if(sd.to !== null && !sd.to.empty) {
				var to = new DateTime(sd.to);
				if(from.isAfter(to)){
					error("The dates must correlative", JGenPackage.Literals.SEARCH_DATE__TO)
				}
			}
		} catch(IllegalArgumentException ex) {
			error("The dates must be in the ISO 8601 format", JGenPackage.Literals.SEARCH_DATE__FROM)
		}
	}
	
	@Check
	def checkRepeatOptions(RepeatOptions ro) {
		if(ro.every < 1){
	 		error("The search interval can't be less than 1 second", ro, JGenPackage.Literals.REPEAT_OPTIONS__EVERY)
	 	}	
	 	if(ro.every > Integer.MAX_VALUE){
	 		error("The Search interval is too big", ro, JGenPackage.Literals.REPEAT_OPTIONS__EVERY)
	 	}
	 	if(ro.until.value < 1){
	 		error("The search repetition can't be less than 1", ro, JGenPackage.Literals.REPEAT_OPTIONS__EVERY)
	 	}	
	 	if(ro.until.value > Integer.MAX_VALUE){
	 		error("The Search repetition is too big", ro, JGenPackage.Literals.REPEAT_OPTIONS__EVERY)
	 	}
	}
	
	/*
	 * LIMIT & DELAY
	 */
	 
	 @Check
	 def checkLimit(SearchLimit limit){
	 	if(limit.limit < 1){
	 		error("The Search Limit can't be lower than 1 second", limit, JGenPackage.Literals.SEARCH_LIMIT__LIMIT)
	 	}	
	 	if(limit.limit > Integer.MAX_VALUE){
	 		error("The Search Limit is too big", limit, JGenPackage.Literals.SEARCH_LIMIT__LIMIT)
	 	}
	 }
	 
	 @Check
	 def checkDelay(SearchDelay delay){
	 	if(delay.delay < 1){
	 		error("The Search Delay can't be lower than 1 second", delay, JGenPackage.Literals.SEARCH_DELAY__DELAY)
	 	}
	 	if(delay.delay > Integer.MAX_VALUE){
	 		error("The Search delay is too big", delay, JGenPackage.Literals.SEARCH_DELAY__DELAY)
	 	}	
	 }
}
